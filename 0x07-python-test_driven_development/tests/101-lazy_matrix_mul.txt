"""
This module contains all the test conditions
for the function called `lazy_matrix_mul` which multiplies
2 matrices using the module NumPy

List of Lists
=============

Passing a valid argument to the function results:

..
..
	>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	array([[ 7, 10],
	       [15, 22]])

	>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	array([[13, 16]])

	>>> a = [[23, 56, 1, 44], [89, 23, 1, 34]]
	>>> b = [[3, 5, 9, 0], [1, 3, 23, 12], [11, 34, 45, 0], [0, 2, 2, 90]]
	>>> lazy_matrix_mul(a, b)
	array([[ 136,  405, 1628, 4632],
	       [ 301,  616, 1443, 3336]])

None square matrix test
=======================
..
..
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 34, 0], [3, 4, 12, 1]])
	array([[  7,  10,  58,   2],
	       [ 15,  22, 150,   4]])

It will also works for float number

..
..
	>>> lazy_matrix_mul([[2.3, 1.8], [3.9, 4.2]], [[8.2, 34.1], [22.0, 12.3]])
	array([[ 58.46, 100.57],
	       [124.38, 184.65]])

..
..
	>>> lazy_matrix_mul(123, 23)
	2829

String and list of list of numbers

..
..
	>>> lazy_matrix_mul("silamlak", [[7, 10], [3, 5]])
	Traceback (most recent call last):
	TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U8') dtype('<U8') dtype('<U8')

..
..
	>>> lazy_matrix_mul([[7, 10], [3, 5]], "amlaksil")
	Traceback (most recent call last):
	TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U8') dtype('<U8') dtype('<U8')

Pass list which is not list of lists

..
..
	>>> lazy_matrix_mul([2, 4, 5], [8, 3, 1])
	33

..
..
	>>> lazy_matrix_mul([[7, 10], [15, 22]], [8, 3, 1])
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,) not aligned: 2 (dim 1) != 3 (dim 0)

Pass empty argument for the first matrix

..
..
	>>> lazy_matrix_mul([[]], [[23, 56, 1, 44], [89, 23, 1, 34]])
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (2,4) not aligned: 0 (dim 1) != 2 (dim 0)

Pass empty argument for the second matrix

..
..
	>>> lazy_matrix_mul([[23, 56, 1, 44], [89, 23, 1, 34]], [[]])
	Traceback (most recent call last):
	ValueError: shapes (2,4) and (1,0) not aligned: 4 (dim 1) != 1 (dim 0)

If the number of columns of the first matrix is not equal to the number of rows
of the second matrix they can't be multiplied

..
..
	>>> lazy_matrix_mul([[1, 2, 5], [3, 4, 12]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

None float and integer input

..
..
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 34, 0], [3, 4, 12, 'sil']])
	Traceback (most recent call last):
	ValueError: data type must provide an itemsize

	>>> lazy_matrix_mul([[1, 2], ['sil', 4]], [[1, 2, 34, 0], [3, 4, 12, 2]])
	Traceback (most recent call last):
	ValueError: data type must provide an itemsize

If the list of lists are not rectangle

..
..
	>>> lazy_matrix_mul([[1, 2], [4, 4, 34, 12]], [[1, 2, 34, 0], [3, 4, 12, 2]])
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

	>>> lazy_matrix_mul([[1, 2], [4, 4]], [[1, 2, 34, 0, 123], [3, 4, 12, 2]])
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

..
..
	>>> lazy_matrix_mul()
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

	>>> lazy_matrix_mul([[1, 2], [4, 4]])
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
